Material-UI Components
	1.	AppBar:
	•	Use AppBar for the top navigation bar.
	•	Include components like Toolbar, Typography, and IconButton for a complete header.
	2.	Container:
	•	Use Container to center and constrain the width of your content.
	3.	Grid:
	•	Use Grid for responsive layout and aligning your movie cards in a flexible grid layout.
	4.	Card:
	•	Use Card, CardMedia, CardContent, and CardActions to display movie details effectively.
	5.	Button:
	•	Use Button for actions like search, add to watchlist, update status, and delete.
	6.	TextField:
	•	Use TextField for input fields, such as search bars and forms.
	7.	Typography:
	•	Use Typography for consistent text styling across your app.
	8.	Dialog:
	•	Use Dialog for modal pop-ups, such as detailed movie information or confirmation dialogs for delete actions.
	9.	Snackbar:
	•	Use Snackbar for notifications and alerts, like successful actions or error messages.
	10.	CircularProgress:
	•	Use CircularProgress for loading indicators.
	11.	Paper:
	•	Use Paper for creating surfaces with elevation and background.


	// // Function to search movies from Search endpoint
  // const searchMovies = async (query) => {
  //   setLoading(true);
  //   setError(null);
  //   try {
  //     const response = searchMovies(query);
  //     console.log("Fetched Movies:", response);
  //     setSearchResults(Array.isArray(response.data) ? response.data : []);
  //   } catch (error) {
  //     setError(error);
  //     setSearchResults([]);
  //   }
  //   setLoading(false);
  // };

  // // ** CRUD Movie Functions ** //

  // // Function to add movie
  // const addMovie = async (movieData) => {
  //   setLoading(true);
  //   try {
  //     await axios.post(`${url}/${endpoint}`, movieData);
  //     // refresh movie list when movie is added
  //     getAllMovies();
  //   } catch (error) {
  //     setError(error);
  //   }
  //   setLoading(false);
  // };

  // // Function to get all movies
  // const getAllMovies = async () => {
  //   setLoading(true);
  //   try {
  //     // To test loading and error states
  //     // await new Promise((resolve) => setTimeout(resolve, 2000));
  //     // throw new Error("Simulated error");
  //     const response = await axios.get(`${url}/${endpoint}/`);
  //     setMovies(response.data);
  //     console.log("API Response:", response.data);
  //   } catch (error) {
  //     console.error("Error fetching movies:", error.message);
  //     setError(error);
  //   }
  //   setLoading(false);
  // };

  // // Function to update a movie
  // const updateMovie = async (id, updateData) => {
  //   try {
  //     await axios.put(`${url}/${endpoint}/${id}`, updateData);
  //     // refresh movie list when movie is added
  //     getAllMovies();
  //   } catch (error) {
  //     setError(error);
  //   }
  //   setLoading(false);
  // };

  // // Function to delete movie
  // const deleteMovie = async (id) => {
  //   try {
  //     await axios.delete(`${url}/${endpoint}/${id}`);
  //     // refresh movie list when movie is added
  //     const newData = movies.filter((movie) => movie._id !== id);
  //     setMovies(newData);
  //   } catch (error) {
  //     setError(error);
  //   }
  //   setLoading(false);
  // };



  import MovieCard from "./MovieCardResult";
import { Grid } from "@mui/material";

const Results = ({ movies }) => {
  return (
    <Grid container spacing={2}>
      {!movies.length ? (
        <h1>No Movies found</h1>
      ) : (
        movies.map((movie) => (
          <Grid item xs={12} sm={6} md={4} lg={3} key={movie.imdbId}>
            <MovieCard movie={movie} />
          </Grid>
        ))
      }
    </Grid>
  );
};

export default Results;
